<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mysql数据库学习</title>
      <link href="/2021/11/26/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0(1)/"/>
      <url>/2021/11/26/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0(1)/</url>
      
        <content type="html"><![CDATA[<h1 id="sql、DB、DBMS分别是什么，他们之间的关系？"><a href="#sql、DB、DBMS分别是什么，他们之间的关系？" class="headerlink" title="sql、DB、DBMS分别是什么，他们之间的关系？"></a>sql、DB、DBMS分别是什么，他们之间的关系？</h1><pre><code>DB: DataBase（数据库，数据库实际上在硬盘上以文件的形式存在）DBMS: DataBase Management System（数据库管理系统，常见的有：MySQL Oracle DB2 Sybase           SqlServer...）SQL: 结构化查询语言，是一门标准通用的语言。标准的sql适合于所有的数据库产品。     SQL属于高级语言。只要能看懂英语单词的，写出来的sql语句，可以读懂什么意思。     SQL语句在执行的时候，实际上内部也会先进行编译，然后再执行sql。（sql语句的编译由DBMS完成。）     DBMS负责执行sql语句，通过执行sql语句来操作DB当中的数据。DBMS -(执行)-&gt; SQL -(操作)-&gt; DB</code></pre><h1 id="什么是表？"><a href="#什么是表？" class="headerlink" title="什么是表？"></a>什么是表？</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">表：<span class="keyword">table</span>是数据库的基本组成单元，所有的数据都以表格的形式组织，目的是可读性强。</span><br><span class="line">一个表包括行和列：</span><br><span class="line">行：被称为数据<span class="operator">/</span>记录(data)</span><br><span class="line">列：被称为字段(<span class="keyword">column</span>)</span><br><span class="line">学号(<span class="type">int</span>)姓名(<span class="type">varchar</span>)年龄(<span class="type">int</span>)</span><br><span class="line"><span class="comment">------------------------------------</span></span><br><span class="line"><span class="number">110</span>张三<span class="number">20</span></span><br><span class="line"><span class="number">120</span>李四<span class="number">21</span></span><br></pre></td></tr></table></figure><h2 id="每一个字段应该包括哪些属性？"><a href="#每一个字段应该包括哪些属性？" class="headerlink" title="每一个字段应该包括哪些属性？"></a>每一个字段应该包括哪些属性？</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字段名、数据类型、相关的约束。</span><br></pre></td></tr></table></figure><h1 id="学习通用的SQL语句，SQL语句的分类"><a href="#学习通用的SQL语句，SQL语句的分类" class="headerlink" title="学习通用的SQL语句，SQL语句的分类"></a>学习通用的SQL语句，SQL语句的分类</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DQL（数据查询语言）: 查询语句，凡是<span class="keyword">select</span>语句都是DQL。</span><br><span class="line">DML（数据操作语言）：<span class="keyword">insert</span> <span class="keyword">delete</span> update，对表当中的数据进行增删改。</span><br><span class="line">DDL（数据定义语言）：<span class="keyword">create</span> <span class="keyword">drop</span> <span class="keyword">alter</span>，对表结构的增删改。</span><br><span class="line">TCL（事务控制语言）：<span class="keyword">commit</span>提交事务，<span class="keyword">rollback</span>回滚事务。(TCL中的T是       Transaction)</span><br><span class="line">DCL（数据控制语言）: <span class="keyword">grant</span>授权、<span class="keyword">revoke</span>撤销权限等。</span><br></pre></td></tr></table></figure><h1 id="登录数据库"><a href="#登录数据库" class="headerlink" title="登录数据库"></a>登录数据库</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">命令行窗口输入：<span class="operator">-</span>uroot <span class="operator">-</span>p你的密码</span><br><span class="line">初始化数据：source 文件路径</span><br><span class="line">(以<span class="keyword">sql</span>结尾的文件称为<span class="keyword">sql</span>脚本，其中包含着许多的<span class="keyword">sql</span>语句)</span><br><span class="line"><span class="keyword">sql</span>脚本中的数据量太大的时候，无法打开，请使用source命令完成初始化。</span><br></pre></td></tr></table></figure><h1 id="常用sql命令"><a href="#常用sql命令" class="headerlink" title="常用sql命令"></a>常用sql命令</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) mysql<span class="operator">&gt;</span> <span class="keyword">select</span> database(); 查看当前使用的是哪个数据库</span><br><span class="line"></span><br><span class="line">​<span class="number">2</span>) mysql<span class="operator">&gt;</span> <span class="keyword">select</span> version(); 查看mysql的版本号。</span><br><span class="line"></span><br><span class="line">​<span class="number">3</span>) \c  命令，结束一条语句。</span><br><span class="line"></span><br><span class="line">​<span class="number">4</span>) exit 命令，退出mysql。</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>)showtables;(显示当前数据库中的所有的表)</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>)<span class="keyword">create</span> database 数据库名</span><br><span class="line"></span><br><span class="line"><span class="number">7</span>)<span class="keyword">show</span> databases 显示当前有的所有数据库</span><br><span class="line"></span><br><span class="line"><span class="number">8</span>)use 数据库名 选择要使用的数据库名</span><br><span class="line"></span><br><span class="line"><span class="number">9</span>)<span class="keyword">drop</span> database sqlname;删库</span><br><span class="line"></span><br><span class="line"><span class="number">10</span>)<span class="keyword">show</span> <span class="keyword">create</span> database sqlname 查看数据库的定义</span><br><span class="line"></span><br><span class="line"><span class="number">11</span>)<span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> tablename 查看数据表的定义</span><br><span class="line"></span><br><span class="line"><span class="number">12</span>)<span class="keyword">alter</span> <span class="keyword">table</span> 旧表名 rename 新表名</span><br><span class="line"></span><br><span class="line"><span class="number">13</span>)<span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 字段名 数据类型...;(添加新的字段)</span><br><span class="line"></span><br><span class="line"><span class="number">14</span>)<span class="keyword">alter</span> <span class="keyword">table</span> 表名 change 原字段名 新字段名 数据类型...；(修改字段)</span><br><span class="line"></span><br><span class="line"><span class="number">15</span>)<span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 字段名（删除字段）</span><br><span class="line"></span><br><span class="line"><span class="number">16</span>)在创建完表之后添加主键约束：<span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">constraint</span> 主键名 <span class="keyword">primary</span> key 表名（主键字段）</span><br><span class="line"><span class="number">17</span>)在创建完表之后进行外键约束：<span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">constraint</span> 外键名 <span class="keyword">foreign</span> key（外键字段）<span class="keyword">references</span> 关联表名（关联字段）</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="删除数据库：drop-database-数据库名"><a href="#删除数据库：drop-database-数据库名" class="headerlink" title="删除数据库：drop database 数据库名"></a>删除数据库：drop database 数据库名</h2><h1 id="查看表的结构：desc-表名"><a href="#查看表的结构：desc-表名" class="headerlink" title="查看表的结构：desc 表名"></a>查看表的结构：desc 表名</h1><h1 id="sql语句：（sql语句不区分大小写。）"><a href="#sql语句：（sql语句不区分大小写。）" class="headerlink" title="sql语句：（sql语句不区分大小写。）"></a>sql语句：（sql语句不区分大小写。）</h1><h2 id="查询语句："><a href="#查询语句：" class="headerlink" title="查询语句："></a>查询语句：</h2><p>​     select * from 表名（能够显示表中所有数据的信息，但一般不常用）</p><p>​     select 字段名1,字段名2,字段名3,…. from 表名;（字段可以参与数学运算）</p><p>​     给查询结果的列重命名：select ename,sal * 12 as yearsal from emp;</p><p>​                                               select ename,sal * 12 （as可以省略） ‘年薪’ from emp;</p><p>​     <em>条件查询：（3）select  字段,字段… （1） from  表名  （2）where  条件;</em></p><p>​                           <em>· select ename from emp where sal = 5000;</em></p><p>​                           <em>·select ename,sal from emp where sal between 1100 and 3000;</em> </p><p>​                            <em>// between…and…是闭区间 [1100 ~ 3000]</em></p><p>​    在数据库当中NULL不是一个值，代表什么也没有，为空。</p><p>​    空不是一个值，不能用等号衡量。必须使用 is null或者is not null</p><p>​                            ·select ename,sal,comm from emp where comm is null;</p><p>​                            ·select ename,job from emp where sal in(800, 5000); </p><p>​                            // in后面的值不是区间，是具体的值。</p><p>​    模糊查询like：</p><p>​                找出名字当中含有O的？（在模糊查询当中，必须掌握两个特殊的符号，一个是%，一个是_)</p><pre><code>           %代表任意多个字符，_代表任意1个字符。</code></pre><p>​                    ·select ename from emp where ename like ‘%O%’;</p><p>​    新建一张表：Create table name&lt;Id int ,Name varchar&lt;255&gt;&gt;;</p><p>​                         (插入信息)Insert nametable&lt;id,name&gt; values&lt;1,’john’&gt;</p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>​        select 字段名 from 表名 （4）order by 字段;(默认是升序)</p><p>​        select 字段名 from 表名 order by 字段 asc;</p><p>​        select 字段名 from 表名 order by 字段 desc;（降序）</p><p>​        select ename,sal from emp order by sal desc , ename asc;</p><p>注意：越靠前的字段越能起到主导作用。只有当前面的字段无法完成排序的时候，才会启用后面的字段。</p><h2 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h2><p>对某一组数据进行操作（在where操作之后）：（又名多行处理函数）自动忽略null</p><p>count 计数  count（*）计数总记录的条数  count（comm）：表示统计comm字段中不为bull的数据总量</p><p>sum 求和</p><p>avg  平均值</p><p>max 最大值</p><p>min 最小值</p><h2 id="单行处理函数"><a href="#单行处理函数" class="headerlink" title="单行处理函数"></a>单行处理函数</h2><p>ifnull（可能为null的数据被当作什么处理）:属于单行处理函数</p><h2 id="groupby和having"><a href="#groupby和having" class="headerlink" title="groupby和having"></a>groupby和having</h2><p>groupby：按照某个字段或者某些字段进行分组</p><p>having：having是对分组之后的数据进行再次过滤</p><p>规则：当一条语句中有group by的话，select后面只能跟分组函数和参与分组的字段。</p><h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2><p>select               5</p><p>..</p><p>from            1    </p><p>..</p><p>where            2</p><p>..</p><p>group by        3</p><p>..</p><p>having               4</p><p>..</p><p>order by        6</p><p>…</p><h2 id="查询结果集的去重："><a href="#查询结果集的去重：" class="headerlink" title="查询结果集的去重："></a>查询结果集的去重：</h2><p>distinct 关键字去除重复记录（只能出现在所有字段的最前面）</p><h2 id="连接查询："><a href="#连接查询：" class="headerlink" title="连接查询："></a>连接查询：</h2><p>内连接：</p><p>​    1）等值连接</p><p>​    2）非等值连接</p><p>​    3）自连接</p><p>外连接：</p><p>​    1）左外连接</p><p>​    2）右外连接</p><p>全连接(很少用)</p><p><strong>笛卡尔积现象：当两张表进行连接查询的时候，没有任何条件进行限制，最终的查询结果条数是两张表记录条数的乘积。</strong></p><p>内连接:</p><p>select 字段名 from emp e (inner) join  dept d on e.deptno=d.deptno(连接条件);</p><p>select   e.ename,e.sal,s.grade  from emp e inner join salgrade s on  e.sal between s.losal and s.hisal;</p><p><strong>自连接</strong>：最大的特点是：一张表看做两张表。自己连接自己。</p><p><strong>外连接</strong>：</p><p>内连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">假设A和B表进行连接，使用内连接的话，凡是A表和B表能够匹配上的记录查询出来，这就是内连接。</span><br><span class="line"></span><br><span class="line">AB两张表没有主副之分，两张表是平等的。</span><br></pre></td></tr></table></figure><p> 外连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">假设A和B表进行连接，使用外连接的话，AB两张表中有一张表是主表，一张表是副表，主要查询主表中</span><br><span class="line"></span><br><span class="line">的数据，捎带着查询副表，当副表中的数据没有和主表中的数据匹配上，副表自动模拟出NULL与之匹配。</span><br></pre></td></tr></table></figure><p> 外连接的分类？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">左外连接（左连接）：表示左边的这张表是主表。</span><br><span class="line"></span><br><span class="line">右外连接（右连接）：表示右边的这张表是主表。</span><br></pre></td></tr></table></figure><p> <em>左连接有右连接的写法，右连接也会有对应的左连接的写法。</em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">a.ename <span class="string">&#x27;员工&#x27;</span>, b.ename <span class="string">&#x27;领导&#x27;</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span></span><br><span class="line">emp b</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">a.mgr <span class="operator">=</span> b.empno;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>左外连接</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">a.ename <span class="string">&#x27;员工&#x27;</span>, b.ename <span class="string">&#x27;领导&#x27;</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp b</span><br><span class="line"><span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span></span><br><span class="line">emp a</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">a.mgr <span class="operator">=</span> b.empno;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>右外连接</span><br></pre></td></tr></table></figure><p><u>外连接最重要的特点是：主表的数据无条件的全部查询出来。</u></p><p>三张表之间的连接：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">e.ename,d.dname,s.grade</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">emp e</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> </span><br><span class="line">dept d</span><br><span class="line"><span class="keyword">on</span> </span><br><span class="line">e.deptno<span class="operator">=</span>d.deptno</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> </span><br><span class="line">salgrade s</span><br><span class="line"><span class="keyword">on</span> </span><br><span class="line">e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>emp表先和dept表连接，然后和salgrade表连接</span><br></pre></td></tr></table></figure><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line"></span><br><span class="line">..(select).</span><br><span class="line"></span><br><span class="line">from      select  t.*,s.grade from (select deptno,avg(sal) as avgsal from emp group by   deptno) t join  salgrade s on  t.avgsal between s.losal and s.hisal;</span><br><span class="line">..(select).</span><br><span class="line"></span><br><span class="line">where    select * from emp where sal &gt; (select avg(sal) from emp);</span><br><span class="line"></span><br><span class="line">..(select).</span><br><span class="line"></span><br><span class="line"> //语句中嵌入select子句</span><br></pre></td></tr></table></figure><h2 id="union-（可以将查询结果集相加）"><a href="#union-（可以将查询结果集相加）" class="headerlink" title="union （可以将查询结果集相加）"></a>union （可以将查询结果集相加）</h2><p>将两张表整合在一起：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> 条件一</span><br><span class="line"><span class="keyword">union</span> </span><br><span class="line"><span class="keyword">select</span> dname <span class="keyword">from</span> dept <span class="keyword">where</span> 条件二</span><br></pre></td></tr></table></figure><p><em>//拼接的数据必须两两相对应。不能一张表是一个数据，另一张表是两个数据，这样无法拼接！</em></p><h2 id="limit-取出结果集中的部分数据"><a href="#limit-取出结果集中的部分数据" class="headerlink" title="limit(取出结果集中的部分数据)"></a>limit(取出结果集中的部分数据)</h2><p>limit startindex length</p><p>startindex表示起始位置，从0开始，0表示第一条数据</p><p>length表示取几个</p><p>limit执行的顺序是最后一个</p><h1 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">建表语句的语法格式：</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line"></span><br><span class="line">字段名<span class="number">1</span> 数据类型,</span><br><span class="line"></span><br><span class="line">字段名<span class="number">2</span> 数据类型,</span><br><span class="line"></span><br><span class="line">字段名<span class="number">3</span> 数据类型,</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>关于MySQL当中字段的数据类型：</p><p>int        整数型(java中的int)</p><p>bigint          长整型(java中的long)</p><p>float        浮点型(java中的float double)</p><p>char        定长字符串(String)</p><p>Varchar     可变长字符串(StringBuffer/StringBuilder)</p><p>date        日期类型 （对应Java中的java.sql.Date类型）</p><p>BLOB        二进制大对象（存储图片、视频等流媒体信息） Binary Large OBject        （  对应java中的Object）</p><p>CLOB        字符大对象（存储较大文本，比如，可以存储4G的字符串。） Character Large OBject（对应java中的Object）</p><p>……</p><p><em>数据是定长的话，使用char，不定长的话，使用varchar</em></p><h2 id="insert语句插入数据"><a href="#insert语句插入数据" class="headerlink" title="insert语句插入数据"></a>insert语句插入数据</h2><p>语法格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">insert into 表名(字段名1,字段名2,字段名3,....) values(值1,值2,值3,....)</span><br><span class="line"></span><br><span class="line">要求：字段的数量和值的数量相同，并且数据类型要对应相同。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="表的复制"><a href="#表的复制" class="headerlink" title="表的复制"></a>表的复制</h2><p>语法：</p><p>create table 表名 as select语句;</p><p>将查询结果当做表创建出来。</p><h2 id="将查询结果插入到一张表中"><a href="#将查询结果插入到一张表中" class="headerlink" title="将查询结果插入到一张表中"></a>将查询结果插入到一张表中</h2><p>insert into 表名 select * from 表名</p><h2 id="修改数据：update"><a href="#修改数据：update" class="headerlink" title="修改数据：update"></a>修改数据：update</h2><p>update 表名 set 字段名1=值1,字段名2=值2… where 条件;</p><p><em>没有条件时更新表中的所有数据</em></p><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><p>delete from 表名 where 条件;</p><p>没有条件全部删除</p><h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><p>什么是约束：</p><p>​    在创建表的时候，可以给表的字段添加相应的约束，添加约束的目的是为了保证表中数据的合法性、有效性、完整性。</p><p>常见的约束：</p><p>非空约束(not null)：约束的字段不能为NULL</p><p>唯一约束(unique)：约束的字段不能重复</p><p>主键约束(primary key)：约束的字段既不能为NULL，也不能重复（简称PK）</p><p>外键约束(foreign key)：…（简称FK）</p><p>检查约束(check)：注意Oracle数据库有check约束，但是mysql没有，目前mysql不支持该约束。</p><h2 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h2><p>create table t_user(</p><p>id int,</p><p>username varchar(255) not null（<strong>在创建表时添加约束</strong>）,</p><p>password varchar(255)</p><p>);</p><p>insert into t_user(id,password) values(1,’123’); //编译错误，约束username字段不能为空！</p><p>ERROR 1364 (HY000): Field ‘username’ doesn’t have a default value</p><p> insert into t_user(id,username,password) values(1,’lisi’,’123’);</p><h2 id="唯一性约束"><a href="#唯一性约束" class="headerlink" title="唯一性约束"></a>唯一性约束</h2><p> <em>唯一性约束修饰的字段具有唯一性</em>，<em>不能重复。但可以为null。</em></p><p> drop table if exists t_user;</p><p>create table t_user(</p><p>  id int,</p><p>  usercode varchar(255),</p><p>  username varchar(255),</p><p>  unique(usercode,username) //多个字段联合起来添加一个约束unique 【表级约束】</p><p>​      );</p><p><strong>ps：not null约束只有列级约束，没有表级约束。</strong></p><h2 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_user(</span><br><span class="line"></span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key, <span class="operator">/</span><span class="operator">/</span>列级约束</span><br><span class="line"></span><br><span class="line">username <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line"></span><br><span class="line">email <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">   );</span><br></pre></td></tr></table></figure><p><strong>主键约束</strong>，不能为null也不能重复！</p><p> 主键约束 ：primary key</p><p> 主键字段 : id字段添加primary key之后，id叫做主键字段</p><p> 主键值 ：id字段中的每一个值都是主键值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">create</span> <span class="keyword">table</span> t_user(</span><br><span class="line"></span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key, <span class="operator">/</span><span class="operator">/</span>列级约束</span><br><span class="line"></span><br><span class="line">username <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line"></span><br><span class="line">email <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line"> );</span><br></pre></td></tr></table></figure><h3 id="主键的分类："><a href="#主键的分类：" class="headerlink" title="主键的分类："></a>主键的分类：</h3><p>1）根据主键字段的字段数量来分：</p><p>单一主键 and 复合主键</p><p>2）根据主键的性质来划分：</p><p>自然主键  and 业务主键</p><p><strong>一个表的主键约束只能有一个</strong></p><p><em>mysql<strong>提供主键自增</strong></em></p><h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><p>关于外键约束的相关术语：</p><p>   外键约束：foreign key</p><p>   外键字段：添加有外键约束的字段</p><p>   外键值：外键字段中的每一个值。</p><p><strong>A表中的字段引用B表中的字段，则A是子表，B是父表</strong></p><p>删除数据的时候，先删除子表，再删除父表。</p><p>添加数据的时候，先添加父表，再添加子表。</p><p>创建表的时候，先创建父表，再创建子表。</p><p>删除表的时候，先删除子表，再删除父表。</p><p>外键值可以为null</p><h1 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h1><p> CREATE TABLE  t_x (</p><p>​     id int(11) DEFAULT NULL</p><p>​    ) ENGINE=InnoDB DEFAULT CHARSET=utf8; </p><p>在创建一个表的时候可以指定表使用的存储引擎以及字符编码的方式。</p><h2 id="常见的存储引擎"><a href="#常见的存储引擎" class="headerlink" title="常见的存储引擎"></a>常见的存储引擎</h2><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Engine: MyISAM</span><br><span class="line"></span><br><span class="line">   Support: YES</span><br><span class="line"></span><br><span class="line">   Comment: MyISAM storage engine</span><br><span class="line"></span><br><span class="line">Transactions: NO</span><br><span class="line"></span><br><span class="line">   XA: NO</span><br><span class="line"></span><br><span class="line"> Savepoints: NO</span><br></pre></td></tr></table></figure><p>1）不支持事务</p><p>2）是mysql最常用的存储引擎，但是不是默认的，默认的是（）</p><p>3）MyISAM采用三个文件组织一个表：</p><p>  xxx.frm(存储格式的文件)</p><p>  xxx.MYD(存储表中数据的文件)</p><p>  xxx.MYI(存储表中索引的文件)</p><p>优点：可被压缩，节省存储空间。并且可以转换为只读表，提高检索效率。</p><p>缺点:不支持事务。</p><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Engine: InnoDB</span><br><span class="line"></span><br><span class="line">   Support: DEFAULT</span><br><span class="line"></span><br><span class="line">   Comment: Supports transactions, row-level locking, and foreign keys</span><br><span class="line"></span><br><span class="line">   Transactions: YES</span><br><span class="line"></span><br><span class="line"> XA: YES</span><br><span class="line"></span><br><span class="line"> Savepoints: YES</span><br></pre></td></tr></table></figure><p>优点：支持事务、行级锁、外键等。这种存储引擎数据的安全得到保障。</p><p>​    表的结构存储在xxx.frm文件中</p><p>​    数据存储在tablespace这样的表空间中(逻辑概念)，无法被压缩，无法转换成只读。</p><p>​    这种InnoDB存储引擎在MySQL数据库崩溃之后提供自动恢复机制。</p><p>​    InoDB支持级联删除和级联更新。</p><h3 id="MEMORY"><a href="#MEMORY" class="headerlink" title="MEMORY"></a>MEMORY</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> Engine: MEMORY</span><br><span class="line"></span><br><span class="line">   Support: YES</span><br><span class="line"></span><br><span class="line">  Comment: Hash based, stored in memory, useful for temporary tables</span><br><span class="line"></span><br><span class="line">Transactions: NO</span><br><span class="line"></span><br><span class="line">   XA: NO</span><br><span class="line"></span><br><span class="line"> Savepoints: NO</span><br></pre></td></tr></table></figure><p>  缺点：不支持事务。数据容易丢失。因为所有数据和索引都是存储在内存当中的。</p><p> 优点：查询速度最快。</p><p> 以前叫做HEPA引擎。</p><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>一个事务是一个完整的业务逻辑单元，不可再分。</p><p>事务的存在是为了保证数据的完整性，安全性。</p><h2 id="事务的特性"><a href="#事务的特性" class="headerlink" title="事务的特性"></a>事务的特性</h2><p>原子性：事务是最小的工作单元，不可再分。</p><p>一致性：事务必须保证多条DML语句同时成功或者同时失败。</p><p>隔离性：事务A和事务B之间具有隔离。</p><p>持久性：最终数据必须持久化到硬盘中，事务才算成功结束。</p><h2 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h2><p>1）读未提交（read uncommitted）</p><p>​    对方事务还没有提交，我们当前事务可以读取到对方未提交的数据。</p><p>​    读未提交存在脏读现象：表示读到了脏数据。</p><p>2）读已提交（read committed）</p><p>​    对方事务提交之后的数据我方可以读取到。</p><p>​    读已提交存在的问题是：不可重复读。</p><p>3）可重复读（repeatable read）</p><p>​    解决了：不可重复读的问题。</p><p>​    问题：读取到的数据是幻象。</p><p>4）序列化读/串行化读</p><p>​    解决了所有的问题。</p><p>​    效率低，需要事务排队。</p><p>commit：提交</p><p>rollback：回滚</p><p>start transaction：关闭自动提交机制</p><blockquote><p>mysql可以远程登录：mysql -h主机号 -uroot -pyourpassword</p></blockquote><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>索引相当于一本书的目录，通过目录可以快速的找到对应的资源。</p><p>查询一张表是的方法：</p><p>​    全表扫描：</p><p>​    根据索引检索：</p><p>创建索引对象：</p><p>​    create index 索引名称 on 表名（字段名）；</p><p>​    drop index 索引对象 on 表名；</p><p>什么时候添加索引：</p><p>​    1）数据量庞大</p><p>​    2）该字段很少DML操作</p><p>​    3）该字段经常出现在where子句中</p><blockquote><p>主键具有unique约束的字段会被自动添加索引</p><p>根据主键索引的效率较高，尽量根据主键进行索引</p></blockquote><h2 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a>索引的分类</h2><p>​    单一索引：给单个字段添加索引</p><p>​    复合索引：给多个字段联合起来添加一个索引</p><p>​    主键索引：主键上会自动添加索引</p><p>​    唯一索引：有unique约束的字段会自动添加索引</p><p>​    ……</p><blockquote><p>模糊查询的时候，第一个通配符使用的是%，这个时候索引是是失效的。</p></blockquote><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><blockquote><p>站在不同的角度去看到数据。(同一张表的数据，通过不同的角度去看待)</p></blockquote><p>创建视图：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> myview <span class="keyword">as</span> <span class="keyword">select</span> empno,ename <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> myview;</span><br><span class="line"></span><br><span class="line">注意：只有DQL语句才能以试图对象的方式创建出来。</span><br></pre></td></tr></table></figure><p>对试图进行增删改查，会影响到原表数据。(通过视图影响原表数据，不是直接操作的原表)</p><p> 可以对试图进行CRUD操作。</p><blockquote><p>试图可以隐藏表的实现细节。保密级别较高的系统，数据库只对外提供相关的视图。</p></blockquote><h1 id="DBA命令"><a href="#DBA命令" class="headerlink" title="DBA命令"></a>DBA命令</h1><p>在数据库当中的数据导出</p><blockquote><p> 在windows的DOS命令窗口中执行： (导出整个库)</p><p> mysqldump  数据库名&gt;D:\文件名.sql -uroot -p999</p><p>在windows的dos命令窗口中执行：(导出数据库中指定的表)</p><p>  mysqldump 数据库名 表名&gt;D:\文件名.sql -uroot -p999</p></blockquote><p><strong>导入数据</strong></p><blockquote><p>create database bjpowernode;</p><p>use bjpowernode;</p><p>source D:\bjpowernode.sql </p></blockquote><p>数据库设计三范式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.任何一张表都应该有主键</span><br><span class="line">2.建立在第一范式的基础上，所有的非主键字段完全依赖主键，不能产生部分依赖</span><br><span class="line">3.建立在第二范式的基础上，所有非主键字段直接依赖主键，不能产生传递依赖</span><br><span class="line"> 多对多？三张表，关系表两个外键。</span><br><span class="line"> 一对多？两张表，多的表加外键。</span><br><span class="line">  一对一设计:主键共享。</span><br><span class="line">  一对一设计:外键唯一。</span><br></pre></td></tr></table></figure><h1 id="数据库的卸载"><a href="#数据库的卸载" class="headerlink" title="数据库的卸载"></a>数据库的卸载</h1><blockquote><p>1.卸载软件</p><p>2.programData文件夹</p><p>3.数据库目录</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入了解JVM</title>
      <link href="/2021/11/22/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3JVM/"/>
      <url>/2021/11/22/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3JVM/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理之指令系统</title>
      <link href="/2021/11/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B9%8B%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F/"/>
      <url>/2021/11/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B9%8B%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理之存储器</title>
      <link href="/2021/11/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B9%8B%E5%AD%98%E5%82%A8%E5%99%A8/"/>
      <url>/2021/11/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B9%8B%E5%AD%98%E5%82%A8%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="一、存储器："><a href="#一、存储器：" class="headerlink" title="一、存储器："></a>一、存储器：</h1><h2 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h2><h3 id="根据存储介质分类："><a href="#根据存储介质分类：" class="headerlink" title="根据存储介质分类："></a>根据存储介质分类：</h3><pre><code>    1.半导体存储器    2.磁表面存储器    3.磁芯存储器    4.光盘存储器</code></pre><h3 id="根据存取的方式进行分类："><a href="#根据存取的方式进行分类：" class="headerlink" title="根据存取的方式进行分类："></a>根据存取的方式进行分类：</h3><pre><code>    1.随机存储器 RAM    2.只读存储器 ROM    3.串行访问存储器</code></pre><h3 id="根据在计算机中的作用分类："><a href="#根据在计算机中的作用分类：" class="headerlink" title="根据在计算机中的作用分类："></a>根据在计算机中的作用分类：</h3><pre><code>    1.主存储器：    2.辅助存储器     3.缓冲存储器</code></pre><h2 id="存储器的基本结构结构："><a href="#存储器的基本结构结构：" class="headerlink" title="存储器的基本结构结构："></a>存储器的基本结构结构：</h2><pre><code>存储器包括存储的部分以及选址的部分，同时可以控制对于存储器的读或者写不同的操作。地址线：用来选址的信号传输线。片选线（用于容量的扩容）、读写控制线（WE）、数据线。</code></pre><p><strong><em>存储器的总容量=存储单元*存储字长</em></strong></p><h2 id="主存储器（主要由RAM和ROM构成）："><a href="#主存储器（主要由RAM和ROM构成）：" class="headerlink" title="主存储器（主要由RAM和ROM构成）："></a>主存储器（主要由RAM和ROM构成）：</h2><pre><code>1.地址寄存器2.数据寄存器3.存储体：存储元组成存储单元，多个存储单元构成存储体    译码器：有2**n个存储单元</code></pre><h3 id="RAM："><a href="#RAM：" class="headerlink" title="RAM："></a>RAM：</h3><pre><code>1.SRAM（静态）：触发器（常用作cache）2.DRAM（动态随机存储器）：电容（常用作主存）    刷新：1）分散刷新 2）集中刷新 3）异步刷新 。（死区的概念）</code></pre><h1 id="存储器的性能指标："><a href="#存储器的性能指标：" class="headerlink" title="存储器的性能指标："></a>存储器的性能指标：</h1><pre><code>1.存储容量： 存储字数*存储字长2.单位成本： 每位价格=总成本/总容量3.存储速度：数据传输率=数据的宽度/存储周期</code></pre><h1 id="主存与CPU的连接："><a href="#主存与CPU的连接：" class="headerlink" title="主存与CPU的连接："></a>主存与CPU的连接：</h1><pre><code>    1.容量拓展：*_使能信号_*(低电平有效)    字拓展：1）译码片选法 2)线选法 n条线对应n个选片信号    位拓展：    字和位同时拓展（选择芯片）</code></pre><h3 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h3><pre><code>系统程序区用ROM用户程序区用RAM执行区都用RAM</code></pre><h1 id="高速缓冲存储器："><a href="#高速缓冲存储器：" class="headerlink" title="高速缓冲存储器："></a>高速缓冲存储器：</h1><pre><code>1.命中率：是指cpu要访问的信息已在cache中的比率h=Nc/(Nc+Nm)2.访问效率：e=tc/ta*100% ta是指平均访问时间</code></pre><h2 id="1-cache地址映射："><a href="#1-cache地址映射：" class="headerlink" title="1.cache地址映射："></a>1.cache地址映射：</h2><pre><code>1.全相连映射2.组相联映射（其余两者的折中）3.直接映射</code></pre><h2 id="2-替换算法："><a href="#2-替换算法：" class="headerlink" title="2.替换算法："></a>2.替换算法：</h2><pre><code>1.RAND（随机）2.FIFO（先进先出）3.LRU （最近最少使用）4.LFU  （不经常使用）</code></pre><h2 id="3-写策略："><a href="#3-写策略：" class="headerlink" title="3.写策略："></a>3.写策略：</h2><pre><code>1.命中时：（1）.全写法 （2）.写回法2.不命中： （1）.写分配法 （2）.非写分配法</code></pre><h2 id="虚拟存储器："><a href="#虚拟存储器：" class="headerlink" title="虚拟存储器："></a>虚拟存储器：</h2><pre><code>辅存的地址（磁盘）：    磁盘号+盘面号+磁道号+扇区号1.虚拟存储器是一个逻辑模型；功能：用户给出一个地址，叫做虚地址或者逻辑地址，虚拟存储器要给出该地址对应      的数据实现：由辅助硬件将虚地址映射到主存当中的某个单元，主存单元地址称为实地址或       物理地址</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OCEANBASE数据库</title>
      <link href="/2021/11/16/OCEANBASE%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2021/11/16/OCEANBASE%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>muzinanStart</title>
      <link href="/2021/11/15/muzinanStart/"/>
      <url>/2021/11/15/muzinanStart/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Hello World&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王璐瑶我喜欢你</title>
      <link href="/2021/11/14/first-blog/"/>
      <url>/2021/11/14/first-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="我的"><a href="#我的" class="headerlink" title="我的"></a><em>我的</em></h1><h1 id="一生至少该有一次-，"><a href="#一生至少该有一次-，" class="headerlink" title="一生至少该有一次 ，"></a><em>一生至少该有一次 ，</em></h1><h1 id="为了某个人而忘了自己-，"><a href="#为了某个人而忘了自己-，" class="headerlink" title="为了某个人而忘了自己 ，"></a><em>为了某个人而忘了自己 ，</em></h1><h1 id="不求有结果-，"><a href="#不求有结果-，" class="headerlink" title="不求有结果 ，"></a><em>不求有结果 ，</em></h1><h1 id="不求同行-，"><a href="#不求同行-，" class="headerlink" title="不求同行 ，"></a><em>不求同行 ，</em></h1><h1 id="不求曾经拥有-，"><a href="#不求曾经拥有-，" class="headerlink" title="不求曾经拥有 ，"></a><em>不求曾经拥有 ，</em></h1><h1 id="甚至不求你爱我-，"><a href="#甚至不求你爱我-，" class="headerlink" title="甚至不求你爱我 ，"></a><em>甚至不求你爱我 ，</em></h1><h1 id="只求在我最美的年华里-，"><a href="#只求在我最美的年华里-，" class="headerlink" title="只求在我最美的年华里 ，"></a><em>只求在我最美的年华里 ，</em></h1><h1 id="遇到你-。"><a href="#遇到你-。" class="headerlink" title="遇到你 。"></a><em>遇到你 。</em></h1><p><em><strong>love is like the wind. You can’t see it but you can feel it.</strong></em></p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/11/14/hello-world/"/>
      <url>/2021/11/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
